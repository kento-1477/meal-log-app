---
name: ci-test

on: [push, pull_request]

jobs:
  test:
    name: ci-test-job
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test
      ENABLE_CRON: false
      DATABASE_URL: postgresql://test_user:test_password@localhost:5433/test_meal_log_db
      TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5433/test_meal_log_db

    services:
      test_db:
        image: postgres:13
        ports: ['5433:5432']
        env:
          POSTGRES_DB: test_meal_log_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd="pg_isready -U test_user"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install yamllint
        run: pip install yamllint

      - name: Lint YAML files
        run: yamllint .github/workflows/*.yml

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Drop and Recreate Test DB
        run: |
          psql -h localhost -p 5433 -U test_user -d postgres -c "DROP DATABASE IF EXISTS test_meal_log_db;"
          psql -h localhost -p 5433 -U test_user -d postgres -c "CREATE DATABASE test_meal_log_db;"
        env:
          PGPASSWORD: test_password

      - name: Install deps (CI)
        run: npm ci

      - name: Run Migrations
        run: npm run migrate:reset

      - name: List knex migrations
        run: npx knex migrate:list --env test

      - name: "Debug: list tables"
        run: |
          psql "$DATABASE_URL" -c '\dt'

      - name: Lint
        run: npx eslint . --max-warnings=0

      - name: Validate Grafana dashboard JSON
        run: python -m json.tool observability/grafana/shadow-diff-dashboard.json > /dev/null

      - name: Check Prometheus rules
        run: |
          docker run --rm \
            -v "${{ github.workspace }}":/work -w /work \
            --entrypoint /bin/promtool \
            prom/prometheus:v2.53.0 \
            check rules observability/prometheus/*.yml

      - name: Run DB migrations (test)
        run: npx knex migrate:latest --env test
        env:
          PGHOST: localhost
          PGPORT: 5433
          PGDATABASE: test_meal_log_db
          PGUSER: test_user
          PGPASSWORD: test_password

      - name: Test
        run: npm test --if-present
        env:
          GEMINI_MOCK: '1'
          NUTRITION_PROVIDER: 'dict'

      - name: Run Golem fixtures
        run: npm run test:golem
